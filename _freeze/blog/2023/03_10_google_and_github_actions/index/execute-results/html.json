{
  "hash": "a2f93d350be145a31b10b7bc16734f87",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: Connecting Google Sheets and GitHub Actions\ndate: 2023-03-10\ncategories: [R, Web scraping, GitHub Actions, Google]\n---\n\n\nThere are already a few blogs and presentations that outline the why and how of GitHub Actions and R:\n\n  - [Jim Hester: GitHub Actions for R](https://www.jimhester.com/talk/2020-rsc-github-actions)\n  - [Beatrice Milz: Introduction to GitHub Actions to R users](https://beamilz.com/posts/series-gha/2022-series-gha-1-what-is/en/)\n  \nAnd also how to schedule R analysis to run on a schedule or connect with Google services:\n\n  - [Simon Couch: Running R Scripts on a Schedule with GitHub Actions](https://blog--simonpcouch.netlify.app/blog/r-github-actions-commit)\n  - [Ryo Nakagawara: Creating a data pipeline with Github Actions & the {googledrive} package for the Canadian Premier League soccer data initiative!](https://ryo-n7.github.io/2021-09-23-CanPL-GoogleDrive-GithubActions-Tutorial)\n\nBecause of this, I'm going to skip right ahead to the part that always trips me up: connecting Google services like Google Drive and Google Sheets to an R script scheduled to run via [GitHub Actions](https://docs.github.com/en/actions).\n\n\n## So, you want to automate saving things in a Google Sheet?\n\nWhen scheduling some code to run with [GitHub Actions](https://docs.github.com/en/actions), a common workflow has been to run some code on schedule using GitHub Actions, save the results to Google Sheets, and allow my boss/peers to leverage the collaborative aspect of Google Sheets to comments and interact with the data product. Recently, this has taken the form of scraping data from websites that are frequently updated or display some sort of ephemeral data.\n\nThe most-difficult part of the whole process for me, however, has been getting the Google Sheets/Google Drive permissions set up. I've spent many hours failing at this, so this document is meant to leave a trail so we don't have to fail twice.\n\n## Permissions needed\n\nThe [googledrive](https://googledrive.tidyverse.org) and [googlesheets4](https://googlesheets4.tidyverse.org) packages make it as easy as possible to interface with Google Drive and Google Sheets in R. Both leverage the [gargle](https://gargle.r-lib.org/) package to set up the security tokens needed to interface with all of the Google services.\n\nThe googledrive package uses the [`drive_auth`](https://googledrive.tidyverse.org/reference/drive_auth.html) function to interface with gargle and set up your authorization, while googlesheets4 uses [`gs4_auth`](https://googlesheets4.tidyverse.org/reference/gs4_auth.html). This process is easy, streamlined, and interactive -- it opens up a browser window, you log into your Google account and tell it \"yes, I want this to be able to access my files\", and that's it! Unfortunately, if we're running this in the cloud somewhere using GitHub Actions we're not going to be there to click the button.\n\n## Google Cloud Platform\n\nBoth packages point to an article in gargle entitled [\"How to get your own API credentials\"](https://gargle.r-lib.org/articles/get-api-credentials.html). This does an excellent job of walking through the how and why; the section of interest to us is [\"Service account token\"](https://gargle.r-lib.org/articles/get-api-credentials.html#service-account-token).\n\nThe first step they outline is to go to the Google Cloud Platform website: <https://console.cloud.google.com>. Once you're there, **make sure you're logged in to the correct account**! Again, I emphasize:\n\n**MAKE SURE YOU'RE LOGGED IN TO THE CORRECT ACCOUNT!**\n\nLook in the top right, and make sure the correct profile picture is staring back at you. I ran into many hours of frustration trying everything to get permissions to work and experiencing failure after frustrating failure. Then I found out that I had made the key in my *personal* account rather than my *institutional* account.ðŸ¤¦\n\nOnce you are logged in to the **CORRECT** account, create a new project (or select an exiting one) using the drop-down menu next to the \"GoogleCloud\" banner at the top.\n\n## Create a service account token\n\nNow we'll create a service account token.\n\n1) Click the navigation menu, and select \"IAM & Admin\", then \"Service Accounts\".\n2) At the top, next to \"Service accounts\" select \"+ CREATE SERVICE ACCOUNT\".\n3) Add a name (I suggest something somewhat descriptive) and the \"Service account ID\" section will autofill. Add a description if you desire.\n4) This token will basically be a fake robot person -- you can select what projects and permissions this fake person will have, or you can skip it. You can change these later -- no biggy.\n5) Click \"DONE\".\n6) Click your newly-created service account and go to the \"KEYS\" tab.\n7) Click \"ADD KEY\", \"Create new key\", select \"JSON\", then \"CREATE\".\n8) This will download a file. Pay attention to where it goes!\n\n## Turn on the Google Sheets/Drive API for your GCP project\n\nNow, we'll enable the Google Sheets and/or Google Drive API to allow the service account token to work.\n\n1) Click the menu, then \"APIs & Services\".\n2) Search for Google Sheets in the search bar.\n3) Select \"Google Sheets API\" from the results.\n4) Click \"ENABLE\".\n5) Repeat for Google Drive, if necessary.\n\n## Fake Google Robot People\n\nYou've basically just created a fake Google robot person. You need to give the fake-Google-robot-person access to the document (like you would a real person) using the fake-Google-robot-person email that is listed within the Service Accounts section.\n\n1) In the \"Service accounts\" section we just visited, you can see your service account token listed by an email. It should be something like \"YOUR-SERVICE-ACCOUNT-NAME@YOUR-GCP-PROJECT-NAME.iam.gserviceaccount.com\"\n2) Navigate to your Google Drive/Sheet you want it to be able to access\n3) If a Google Sheet, click \"share\" on the top right, paste in the robot-person email, and share it. For a Google Drive, navigate to the folder/item you'd like to share and do the same.\n\n## Add your token to GitHub Action secrets\n\nWe're nearing the end!\n\n1) Go into the GitHub repository that houses your GitHub Actions.\n2) Click \"Settings\".\n3) Under \"Security\" in the menu on the left side, select \"Secrets and variables\" and then \"Actions\".\n4) Click \"New repository secret\".\n5) Copy/paste the text in the file that was downloaded when you created your service account token and paste it into the \"Secret\" section.\n6) Give the secret a name.\n7) Click \"Add secret\".\n\nYour service access token can now be added to the .Renviron of the runner created for your GitHub Action. Don't think too hard about what this means -- for us, it just means that we can access the token in a secret way using the name we just gave the secret using `Sys.getenv('NAME_OF_MY_SECRET')`.\n\n\n## Coding on your computer\n\nWhen working through the code on your computer, use the `path` argument to `googledrive::drive_auth` or `googlesheets4::gs4_auth` to tell R where you find your service access token.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# for googledrive\ndrive_auth(path = 'path/to/my/service_token.json')\n\n# for googlesheets4\ngs4_auth(path = 'path/to/my/service_token.json')\n```\n:::\n\n\nWhen you are ready to incorporate this into a GitHub Action, change this to `Sys.getenv('NAME_OF_MY_SECRET')`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngs4_auth(path = Sys.getenv('NAME_OF_MY_SECRET'))\n```\n:::\n\n\n## GitHub Actions\n\nGoing over GitHub Actions and creating the needed workflow files is beyond the scope of this document.\n\nWorking back-to-front in the [workflow YAML for web-scraping GitHub Action of mine](https://github.com/Tail-Winds/rtwb-scrape/blob/main/.github/workflows/scrape_rtwb.yaml), you can see that we have ask GitHub to pull the secret called \"`GDRIVE_PAT`\" (`secret.GDRIVE_PAT`) and assign it to a variable called `GDRIVE_PAT` (`GDRIVE_PAT:`) in our environment (`env:`).\n\n```\njobs: \n  scrape_it:\n    runs-on: ubuntu-latest\n    env:\n      GITHUB_PAT: ${{ secrets.GITHUB_TOKEN }}\n      GDRIVE_PAT: ${{ secrets.GDRIVE_PAT }}\n```\n\nThis stores our access token in a variable called \"`GDRIVE_PAT`\" in the server's .Renvrion. Now, when we write `gs4_auth(path = Sys.getenv('GDRIVE_PAT'))`, our GitHub Action is allowed to access our Google Sheet! SUCCESS!\n\nThe neatest part is that this server is created and destroyed during this session, and our secret is never put out in the open. Completely secure!",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}