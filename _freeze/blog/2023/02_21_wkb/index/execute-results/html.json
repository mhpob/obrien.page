{
  "hash": "72a48957d2d50eae5fe31f19204f2a02",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Creating a simple features object via well-known-binary vs using coordinates\"\ndate: 2023-02-28\ncategories: [R, Fish migration, biotelemetry, sf, spatial, PostGIS]\n---\n\n\nIf you work with fish telemetry data on the east coast of the USA, chances are that you're now at least tangentially related to the Ocean Tracking Network (OTN).\n\nThe Ocean Tracking Network houses their data on a [GeoServer](https://members.oceantrack.org/geoserver/web/), which often uses PostgreSQL/PostGIS behind the scenes. These databases store their spatial data in a format called \"well-known binary\" -- as opposed to the human-readable \"well-known text\" you see in the output of an sf object.\n\nOTN data extracts export the WKB in a column called \"`the_geom`\"; it looks like a long string of numbers and letters. To investigate this, I'll use the data set from [Trudel 2018](#references).\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Download toy data\ntd <- file.path(tempdir(), 'otn_files')\ndir.create(td)\n\ndownload.file('https://members.oceantrack.org/data/repository/pbsm/detection-extracts/pbsm_qualified_detections_2018.zip',\n              destfile = file.path(td, 'pbsm_qualified_detections_2018.zip'))\nunzip(file.path(td, 'pbsm_qualified_detections_2018.zip'),\n      exdir = td)\n\n# Read in data\notn <- read.csv(file.path(td, 'pbsm_qualified_detections_2018.csv'))\n\nhead(otn[, c('latitude', 'longitude', 'the_geom')])\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  latitude longitude                                   the_geom\n1 45.03992 -66.89643 0101000000CF49EF1B5FB950C0693A3B191C854640\n2 45.06272 -66.93253 01010000007D224F92AEBB50C00E677E3507884640\n3 45.06803 -66.92927 0101000000DAC9E02879BB50C0CD920035B5884640\n4 45.06803 -66.92927 0101000000DAC9E02879BB50C0CD920035B5884640\n5 45.06272 -66.93253 01010000007D224F92AEBB50C00E677E3507884640\n6 45.06803 -66.92927 0101000000DAC9E02879BB50C0CD920035B5884640\n```\n\n\n:::\n:::\n\nThe main difference here is that `the_geom` can contain all of the information we may need, like coordinates, geometry type (points? polygons? multipoints? MULTIPOLYGONS???), and coordinate reference system. The `latitude` and `longitude` columns are just text: we need to infer/assume all of the other information.\n\nIn this particular case, that's pretty easy. The latitude/longitude combinations are representing deployed receivers (points) and the are almost certainly in [WGS84](https://en.wikipedia.org/wiki/World_Geodetic_System#WGS84) ([EPSG 4326](https://epsg.io/4326)) as that's the system most-commonly used by a handheld GPS. We can provide this information directly and convert the CSV into an sf object.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(sf)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nLinking to GEOS 3.11.2, GDAL 3.6.2, PROJ 9.2.0; sf_use_s2() is TRUE\n```\n\n\n:::\n\n```{.r .cell-code}\notn_as_sf <- st_as_sf(otn,\n                      coords = c('longitude', 'latitude'),\n                      crs = 4326)\n\nhead(otn_as_sf[, 'the_geom'])\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nSimple feature collection with 6 features and 1 field\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: -66.93253 ymin: 45.03992 xmax: -66.89643 ymax: 45.06803\nGeodetic CRS:  WGS 84\n                                    the_geom                   geometry\n1 0101000000CF49EF1B5FB950C0693A3B191C854640 POINT (-66.89643 45.03992)\n2 01010000007D224F92AEBB50C00E677E3507884640 POINT (-66.93253 45.06272)\n3 0101000000DAC9E02879BB50C0CD920035B5884640 POINT (-66.92927 45.06803)\n4 0101000000DAC9E02879BB50C0CD920035B5884640 POINT (-66.92927 45.06803)\n5 01010000007D224F92AEBB50C00E677E3507884640 POINT (-66.93253 45.06272)\n6 0101000000DAC9E02879BB50C0CD920035B5884640 POINT (-66.92927 45.06803)\n```\n\n\n:::\n:::\n\nThe information we provided (coordinates and a coordinate reference system) helped fill out the metadata in the header and the well-known text (WKT) representation of the points in the \"geometry\" column. The analogous well-known binary (WKB) is contained within \"the_geom\" column. At this point, the WKB are just character strings.\n\nWe can convert the WKB as well, but it necessitates us jumping through some strange hoops. First we need to make \"the_geom\" have a \"WKB\" class. \n\n\n::: {.cell}\n\n```{.r .cell-code}\notn_wkb <- structure(otn$the_geom, class = 'WKB')\n\nattributes(otn_wkb)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n$class\n[1] \"WKB\"\n```\n\n\n:::\n:::\n\nWe can then convert this to a simple features collection via `st_as_sfc`. Note that you may have to pass the `EWKB = T` argument if you come across some WKB in the wild, as PostGIS can create two types of WKB: Extended WKB and ISO WKB. EWKB allows other dimensions (like depth) and embedding a [spatial reference identifier (SRID)](https://desktop.arcgis.com/en/arcmap/latest/manage-data/using-sql-with-gdbs/what-is-an-srid.htm). ISO WKB also allows other identifiers, but no SRID. OTN seems to use ISO WKB as there is no CRS associated with the data.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# ISO WKB, no CRS\nst_crs(\n  st_as_sfc(otn_wkb, EWKB = F)\n)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nCoordinate Reference System: NA\n```\n\n\n:::\n\n```{.r .cell-code}\n# Would have a CRS if EWKB\nst_crs(\n  st_as_sfc(otn_wkb, EWKB = T)\n)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nCoordinate Reference System: NA\n```\n\n\n:::\n:::\n\nTo complete the cycle, we will convert the column to a simple features collection, then set it as the geometry of the original dataset. \n\n\n::: {.cell}\n\n```{.r .cell-code}\notn_wkb <- st_as_sfc(otn_wkb)\n\notn_wkb <- st_set_geometry(otn, otn_wkb)\n\notn_wkb[, 'geometry']\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nSimple feature collection with 622 features and 0 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: -67.09352 ymin: 44.93334 xmax: -61.62142 ymax: 46.54271\nCRS:           NA\nFirst 10 features:\n                     geometry\n1  POINT (-66.89643 45.03992)\n2  POINT (-66.93253 45.06272)\n3  POINT (-66.92927 45.06803)\n4  POINT (-66.92927 45.06803)\n5  POINT (-66.93253 45.06272)\n6  POINT (-66.92927 45.06803)\n7   POINT (-66.9235 45.07047)\n8  POINT (-66.92927 45.06803)\n9   POINT (-66.9235 45.07047)\n10 POINT (-66.92927 45.06803)\n```\n\n\n:::\n:::\n\n\nSo, is there any advantage to jumping through these hoops? Let's benchmark it.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(microbenchmark)\n\nmicrobenchmark(\n  from_binary = {\n    otn_wkb <- st_as_sfc(structure(otn$the_geom, class = 'WKB'),\n                         EWKB = T,\n                         crs = 4326)\n    otn_spatial_wkb <- st_set_geometry(otn, otn_wkb)\n  },\n  from_coord = {\n    otn_spatial <- st_as_sf(otn,\n                            coords = c('longitude', 'latitude'),\n                            crs = 4326)\n  }\n)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nUnit: microseconds\n        expr    min      lq     mean  median      uq    max neval\n from_binary 2478.8 2559.90 3096.142 2642.40 3558.20 7430.1   100\n  from_coord  955.6  994.35 1214.427 1029.45 1320.25 2386.9   100\n```\n\n\n:::\n:::\n\nSure doesn't seem like it. After 100 iterations, parsing the binary is about four times slower than using `st_as_sf`. This result, combined with the fact that the code is more confusing and a PostGIS database is likely not being utilized by OTN's end-users, suggests that the column may not get much use. Converting to EWKB may provide more use via adding a CRS, but the changes in the back end to make this happen probably make it so \"the juice ain't worth the squeeze.\"\n\n\n## References\nTrudel, Marc. “A Pilot Study to Investigate the Migration of Atlantic Salmon Post-Smolts and Their Interactions with Aquaculture in Passamaquoddy Bay, New Brunswick, Canada.” Ocean Tracking Network, 2018. [https://members.oceantrack.org/project?ccode=PBSM](https://members.oceantrack.org/project?ccode=PBSM).\n\nThis issue on GitHub: [https://github.com/r-spatial/sf/issues/745#issuecomment-389778839](https://github.com/r-spatial/sf/issues/745#issuecomment-389778839)",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}