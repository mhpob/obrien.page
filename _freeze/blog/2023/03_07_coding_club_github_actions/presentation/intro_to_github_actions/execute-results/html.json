{
  "hash": "de40d3d16196c3a6d71454596973ac85",
  "result": {
    "markdown": "---\ntitle: \"Introduction to GitHub Actions\"\nformat:\n  revealjs:\n    theme: dark\n    slide-number: true\n    embed-resources: true\n---\n\n\n\n## What is GitHub Actions?\n\nGitHub Actions is \"a continuous integration and continuous delivery (CI/CD) platform that allows you to automate your build, test, and deployment pipeline.\"\n\n<https://docs.github.com/en/actions/learn-github-actions/understanding-github-actions>\n\n## What does this mean for me? {.smaller}\n\nYou can automate the running of certain scripts, to do anything from\n\n- Building a website\n  - <https://github.com/quarto-dev/quarto-actions>\n  - <https://github.com/r-lib/actions/tree/v2/examples#build-pkgdown-site>\n- Testing your code on other operating systems\n  - <https://github.com/r-lib/actions/tree/v2/examples#standard-ci-workflow>\n- Scheduling a script to run\n  - What we're doing today\n  \n# Nuts and bolts\n\n## Servers (\"runners\")\n\n:::: {.columns}\n::: {.column}\nWindows and Linux virtual machines:\n\n- 2-core CPU (x86_64)\n- 7 GB of RAM\n- 14 GB of SSD space\n:::\n::: {.column}\nmacOS virtual machines:\n\n- 3-core CPU (x86_64)\n- 14 GB of RAM\n- 14 GB of SSD space\n:::\n::::\n\n## Servers (\"runners\")\n\n- Much smaller/slower than SALMO/LOTA/ARION, **BUT**\n\n::: {.incremental}\n- Need to be on VPN\n- CBL workstations are not web servers\n- SALMO and LOTA are shared\n- ARION has individual credentials, so hard to collaborate\n:::\n\n# Parts of a GH Action\n\n## Parts of a GH Action\n\n- [**Workflow**](https://docs.github.com/en/actions/using-workflows/about-workflows)\n  - May contain multiple **jobs**\n  - Contains information of what **events** trigger the workflow to start\n- [**Jobs**](https://docs.github.com/en/actions/using-jobs/using-jobs-in-a-workflow)\n  - May contain multiple **steps**\n  - Most steps involve downloading/installing the necessary programs (R, R packages, etc.)\n- **Steps**\n  - The meat of the process\n\n## Environments\n\n- Environments are:\n  - shared between steps\n  - NOT shared between jobs\n  - NOT shared between workflows.\n- Environment in a step takes precedence over that of the bigger job, which takes precedence over that of the workflow.\n\n\n# Coding of a GH Action\n## Location\n\n- Stored in a special \".github\" directory in your repository\n- And then within a \"workflows\" directory\n- Saved in a `yaml` (or `yml`) file \n\n## YAML\n\n- GH Actions are coded in [YAML](https://en.wikipedia.org/wiki/YAML)\n  - \"Yet Another Markup Language\"\n  - \"YAML Ain't Markup Language\"\n- Spacing is **VERY** important in YAML\n- Unfortunately, I haven't really figured out the rules, but GitHub will yell at you if something is incorrect\n- <https://learnxinyminutes.com/docs/yaml/>\n\n## Workflow info\n\n- Name of the workflow (useful to keep track of things)\n```\nname: my_workflow\n```\n- Event triggers ([there are a quite a few](https://docs.github.com/en/actions/using-workflows/events-that-trigger-workflows); these are my favorites)\n```\non:\n  workflow_dispatch:\n  push:\n    branches: [main, my_feature_branch]\n  schedule:\n    - cron: \"30  9,17 * * 1-5\" \n```\n\n## Workflow: Event triggers\n\n:::: {.columns}\n::: {.column}\n- `workflow_dispatch`\n  - adds a button that lets you run the workflow with a click\n- `push`\n  - runs the workflow whenever you push commits to the named branch\n:::\n::: {.column}\n- `schedule`\n  - run at the designated \"MIN HR DofMON MON DofWK\" (UTC)\n  - uses the [cron scheduler](https://en.wikipedia.org/wiki/Cron)\n  - <https://crontab.guru/>\n  - \"30 9,17 * * 1-5\"\n    - Run at 9:30 & 17:30 every day of the month, every month, M-F\n:::\n::::\n\n\n## Jobs\n\n- Name of the job\n- OS to run the job \n  - `runs-on`; usually `ubuntu-latest`\n- Environmental variables\n  - usually always a GH token\n  - other secrets\n\n```\njobs:\n  my-super-neat-job:\n    runs-on: ubuntu-latest\n    env:\n      GITHUB_PAT: ${{ secrets.GITHUB_TOKEN}}\n      MY_SECRET_PASSWORD: ${{ secrets.MIKES_PW }}\n```\n\n## Steps: Setting it up\n\n- Nested under jobs\n- Can run your own program (`run`), or call others that have been developed (`uses`)\n  - <https://github.com/r-lib/actions/tree/v2>\n  - <https://github.com/marketplace?type=actions>\n- First few are usually:\n  1) Check out repository\n  2) Install R\n  3) Install packages\n\n## Steps: Setting it up\n\n```\nsteps:\n  - name: Check out repository\n    uses: actions/checkout@v3\n    \n  - name: Set up R\n    uses: r-lib/actions/setup-r@v2\n    with:\n      use-public-rspm: true\n      \n  - name: Install packages\n    uses: r-lib/actions/setup-r-dependencies@v2\n    with:\n      packages: |\n        any::dplyr\n        any::lubridate\n```\n::: aside\nThe vertical bar is a special character in YAML, allowing for a multi-line string\n:::\n\n## Steps: Getting it done\n\nThe next few are usually where all of the fun stuff happens\n\n```\n  - name: My first R script\n    run: Rscript \"do_the_thing.R\"\n    \n  - name: My next R commands\n    run: |\n      my_addition <- 2 + 2\n    shell: Rscript {0}\n    \n  - name: Show my variable\n    run: my_addition\n    shell: Rscript {0}\n```\n\n::: aside\nYou can source an R script right in the `run` line, or have multiple separate lines and follow it up with calling R in the `shell` command\n:::\n\n## Steps: Saving the result\nWe usually want to do something with the result. If we want to save things, we need to commit it to the repository.\n\n```\n  - name: Commit files\n    run: |\n      git config --local user.name actions-user\n      git config --local user.email \"actions@github.com\"\n      git add .\n      git commit -am \"GH ACTION did something on $(date)\"\n      git push origin main\n```\n\n::: aside\nThis adds all files that were created (`git add .`) to the main branch (`git push origin main`)\n:::\n\n# Other bits and pieces\n## Permissions\n- Likely need to allow write permissions\n  - Settings > Actions > General > Worflow permissions > Read and write permissions\n- Could also possibly do this in the Workflow, but I haven't checked\n- <https://docs.github.com/en/actions/using-jobs/assigning-permissions-to-jobs>\n\n## Permissions: allow writing\nWorkflow level\n```\non:\n  workflow_dispatch:\n\npermissions:\n  contents: write\n```\n\nJob level\n\n```\njob:\n  my_awesome_job:\n    permissions:\n      contents:\n        write\n```\n\n## Artifacts\n\n- Allow sharing of data between jobs/workflows\n- Need to be [uploaded](https://docs.github.com/en/actions/using-workflows/storing-workflow-data-as-artifacts#uploading-build-and-test-artifacts)/[downloaded](https://docs.github.com/en/actions/using-workflows/storing-workflow-data-as-artifacts#downloading-or-deleting-artifacts)\n- If you want to [keep things free](https://docs.github.com/en/billing/managing-billing-for-github-actions/about-billing-for-github-actions):\n  - Last 90 days, at most\n  - Are 500 MB, at most\n\n## Secrets\n\n- Information you'd like to use in your script, but don't want others to see\n  - Usernames/passwords needed to access certain information\n- [Secrets are encrypted](https://docs.github.com/en/actions/security-guides/encrypted-secrets?tool=webui)\n- Can be accessed as an environmental variable\n\n## Secrets (in R)\n\n```\nenv:\n  SUPERSECRET: ${{ secrets.my_saved_secret_on_GH }}\n```\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nthe_secret <- Sys.getenv('SUPERSECRET')\n```\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}